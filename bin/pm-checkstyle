#!/usr/bin/perl
use strict;
use warnings;

use Perl::Metrics::Simple;
use Text::Xslate;
use Data::Section::Simple;

#====================================================
# Config
#====================================================
our $MAX_CYCLOMATIC_COMPLEXITY = 2;
our $MAX_SUB_LENGTH            = 10;

#====================================================
# Logic
#====================================================
main();
exit;

sub main {
    my $check_result = check_style( \@ARGV );
    make_report($check_result);
}

sub check_style {
    my $paths    = shift;
    my $analzyer = Perl::Metrics::Simple->new;
    my $analysis = $analzyer->analyze_files(@ARGV);
    return $analysis;
}

sub make_report {
    my $check_result   = shift;
    my $checkstyle_xml = make_check_style_report($check_result);
    write_file($checkstyle_xml);
}

sub make_check_style_report {
    my $check_result = shift;

    my $tx = Text::Xslate->new(
        path => [ Data::Section::Simple->new()->get_data_section(), ], );

    my $sub_stats = convert_substats_to_file_unit($check_result);
    my %vars = (
        sub_stats         => $sub_stats,
        metric_threshold => {
            max_sub_length=> $MAX_SUB_LENGTH,
            max_cyclomatic_complexity => $MAX_CYCLOMATIC_COMPLEXITY,
        }
    );
    my $report = $tx->render( 'checkstyle-result.tx', \%vars );
    return $report;
}

sub convert_substats_to_file_unit {
    my $check_result = shift;
    my $sub_stats = {};
    foreach my $sub (@{ $check_result->subs}) {
        $sub_stats->{$sub->{path}} ||= [];
        push @{$sub_stats->{$sub->{path}}}, $sub ;
    } 
    return $sub_stats;
}

sub write_file {
    my $report = shift;
    my $io = IO::File->new( 'checkstyle-result.xml', 'w' );
    $io->print($report);
    $io->close;
}

__DATA__

@@ checkstyle-result.tx
<checkstyle version="5.1">
: for $sub_stats.keys() -> $file_path {
  <file name="<: $file_path :>">
  : for $sub_stats[$file_path] -> $sub_stat {
    : if $sub_stat.lines >= $metric_threshold.max_sub_length {
      <error line="1" column="1" severity="error" message="'<: $sub_stat.name :>' method length is <: $sub_stat.lines :> lines." source="com.puppycrawl.tools.checkstyle.checks.sizes.MethodLengthCheck"/>
    : } elsif $sub_stat.mccabe_complexity >= $metric_threshold.max_cyclomatic_complexity {
      <error line="1" column="1" severity="error" message="'<: $sub_stat.name :>' cyclomatic complexity is <: $sub_stat.mccabe_complexity :>." source="com.puppycrawl.tools.checkstyle.checks.metrics.CyclomaticComplexityCheck"/>
    : }
  : }
  </file>
: }
</checkstyle>
